#!/usr/bin/env node

var StreamStash = require('../'),
    util = require('util'),
    path = require('path'),
    fs = require('fs'),
    dashdash = require('dashdash'),
    StatsDClient = require('statsd-client'),
    plugins = {
        inputs: {},
        outputs: {}
    }

//TODO: We had -v[vv]

//process.stdin.resume()

var optParser = new dashdash.Parser({
    options: [
        {
            names: ['help', 'h'],
            type: 'bool',
            help: 'Print this help and exit'
        },
        {
            names: ['kill-timeout', 'k'],
            type: 'number',
            default: 30,
            help: 'The amount of time to wait for a shutdown before forcing an exit, default 30 seconds'
        },
        {
            names: ['log-level', 'l'],
            type: 'string',
            help: 'Set the minimum log level to output; debug, info, error, or off. Defaults to info.',
            helpArg: 'LEVEL',
            default: 'info'
        }
    ]
})

Object.keys(StreamStash.inputs).forEach(function (plugin) {
    if (!StreamStash.inputs[plugin].NAME) {
        console.error(plugin + " did not have a basename, ignoring")
    }

    plugins.inputs[StreamStash.inputs[plugin].NAME.toLowerCase()] = StreamStash.inputs[plugin]
})

Object.keys(StreamStash.outputs).forEach(function (plugin) {
    if (!StreamStash.outputs[plugin].NAME) {
        console.error(plugin + " did not have a basename, ignoring")
    }

    plugins.outputs[StreamStash.outputs[plugin].NAME.toLowerCase()] = StreamStash.outputs[plugin]
})

try {
    var opts = optParser.parse(process.argv)
} catch (error) {
    printHelp(error.message)
}

if (opts.help) {
    printHelp()
}

var levelName = opts['log_level'].toUpperCase()

if (!StreamStash.Logger.LEVEL.hasOwnProperty(levelName)) {
    printHelp('Invalid log level `' + opts['log_level'] + '`')
}

var logger = new StreamStash.Logger({ level: StreamStash.Logger.LEVEL[levelName] }),
    streamStash = new StreamStash({ logger: logger })

// Build up our globals, helpers for basic usage of StreamStash
global.StreamStash = StreamStash
global.streamStash = streamStash
global.logger = logger
global.parsers = StreamStash.parsers

/**
 * Adds a filter to the filter chain
 * TODO: Document the filter function args
 *
 * @param {String} [name] Name of the filter, will show in telemetry, among other places.
 *      Avoid using `.` unless you want your telemetry to be all screwy
 * @param {Function} func A filter function to add
 */
global.addFilter = function (name, func) {
    streamStash.addFilter(name, func)
}

/**
 * Adds an input plugin to be used
 *
 * @param {String|Function} name Either a built in input name, path to an input plugin, or constructor
 * @param {Object} [options] Configuration options for the plugin, refer to the plugin for more information
 */
global.addInputPlugin = function (name, options) {
    var ctor = loadPlugin('inputs', name),
        baseOptions = {
            streamStash: streamStash,
            EventContainer: StreamStash.EventContainer,
            logger: logger
        }

    streamStash.addInputPlugin(new ctor(util._extend(baseOptions, options)))
}

/**
 * Adds an output plugin to be used
 *
 * @param {String|Function} name Either a built in output name, path to an output plugin, or constructor
 * @param {Object} [options] Configuration options for the plugin, refer to the plugin for more information
 */
global.addOutputPlugin = function (name, options) {
    var ctor = loadPlugin('outputs', name),
        baseOptions = {
            streamStash: streamStash,
            logger: logger
        }

    streamStash.addOutputPlugin(new ctor(util._extend(baseOptions, options)))
}

/**
 * Enables telemetry to be sent to a statsd compliant service
 *
 * @param {String} host The host to send telemetry to, can also be `http://...` to send over http
 * @param {Number} port The port to connect to the remote service on
 * @param {String} [prefix=streamstash] Prefix to use for all stats
 * @param {Boolean} [tcp=false] If true TCP will be used, if false UDP will be used
 */
global.telemetry = function (host, port, prefix, tcp) {
    var statsdClient = new StatsDClient({
        host: host,
        port: port,
        tcp: tcp,
        prefix: prefix || 'streamstash'
    })

    streamStash.enableTelemetry(statsdClient)
}

// Setup config files
var configPaths = opts._args,
    files = [],
    pathRegex = new RegExp('\\.js$')

try {
    configPaths.forEach(function (testPath) {
        files = files.concat(lookupFiles(testPath))
    })
} catch (error) {
    var useError

    if (error.code === 'ENOENT') {
        useError = 'No such file or directory: ' + error.path
    } else {
        useError = error.message
    }

    console.error(useError)
    process.exit(1)
}

if (files.length === 0) {
    printHelp('No config files or directories were provided')
}

files.forEach(function (filePath) {
    require(path.resolve(filePath))
})

// Set up a signal handler for SIGINT to gracefully shutdown
streamStash.killTimeout = opts['kill_timeout']

process.on('SIGINT', function () {
    logger.info('StreamStash', 'Got SIGINT, starting shutdown')
    streamStash.shutdown('SIGINT after shutdown request')
})

process.on('SIGTERM', function () {
    logger.info('StreamStash', 'Got SIGTERM, starting shutdown')
    streamStash.shutdown('SIGTERM after shutdown request')
})

streamStash.once('stopped', function () {
    logger.info('StreamStash', 'Exited gracefully')
    process.exit(0)
})

// Start it up
streamStash.start()

process.on('uncaughtException', function (error) {
    logger.error('uncaught_exception', error, { error: error.stack || error })
    streamStash.shutdown('Uncaught exception occurred')
})

/**
 * Tries to load a plugin
 *
 * @param {String} type Either `inputs` or `outputs` for whichever type is being loaded
 * @param {String|Function} name Either an built in plugin name, a path to a plugin to load, or a constructor
 *
 * @returns {Function} A constructor for the plugin
 */
function loadPlugin (type, name) {
    var ctor,
        useName = name.toLowerCase()

    //If we got a function in the first place, use it
    if (typeof name === 'function') {
        return name

    //Look for our own plugin first
    } else if (plugins[type][useName]) {
        ctor = plugins[type][useName]

    //See if it's an external module
    } else {
        try {
            ctor = require(name)
        } catch (err) {
            printHelp('Invalid ' + type.slice(0, -1) + ' plugin "' + name + '"')
        }
    }

    return ctor
}

/**
 * Looks up files within a path, optionally recursively
 *
 * @param {String} filePath The file path to search
 *
 * @returns {Array.<String>} An array of files found within filePath
 */
function lookupFiles (filePath) {
    var found = [],
        useFilePath = fs.existsSync(filePath) ? filePath : filePath + '.js'

    var stat = fs.statSync(useFilePath)
    if (stat.isFile()) {
        return [useFilePath]
    }

    fs.readdirSync(useFilePath).forEach(function (file) {
        var useFile = path.join(useFilePath, file),
            stat = fs.statSync(useFile)

        if (stat.isDirectory()) {
            found = found.concat(lookupFiles(useFile))
            return
        }

        if (!stat.isFile() || !pathRegex.test(useFile) || path.basename(useFile)[0] == '.') {
            return
        }

        found.push(useFile)
    })

    return found
}

/**
 * Prints the help and optionally an error
 *
 * @param {String} [error] An error message to print before the help
 */
function printHelp (error) {
    var status = 0,
        name,
        plugin

    console.log()

    if (error) {
        console.error('ERROR:', error)
        console.log()
        status = 1
    }
    var width = (process.stdout.getWindowSize) ? process.stdout.getWindowSize()[0] : 120

    console.log('Usage: streamstash [OPTIONS] [<config file or directory>...]\n')
    console.log('Options:')
    console.log(optParser.help({ includeEnv: true, maxCol: width }).trimRight())

    console.log('\nKnown input plugins')
    for (name in plugins.inputs) {
        plugin = plugins.inputs[name]
        console.log('    ' + plugin.NAME + ' - ' + plugin.DESCRIPTION)
    }

    console.log('\nKnown output plugins')
    for (name in plugins.outputs) {
        plugin = plugins.outputs[name]
        console.log('    ' + plugin.NAME + ' - ' + plugin.DESCRIPTION)
    }

    process.exit(status)
}
